#!/usr/bin/env bash

# Inspired by
# - https://github.com/Scalingo/nodejs-buildpack/blob/429b9776d8b0f34f775a10caa4eae46677ead0af/bin/compile

set -o errexit    # always exit on error
set -o pipefail   # don t ignore exit codes when piping output

if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

#

info() {
  echo "       $*" || true
}

error() {
  echo " !     $*" >&2 || true
  echo "" || true
}

header() {
  echo "" || true
  echo "-----> $*" || true
}

#

write_profile() {
  local bp_dir="$1"
  local build_dir="$2"
  mkdir -p "$build_dir/.profile.d"
  cp "$bp_dir"/profile/* "$build_dir/.profile.d/"
}

write_profile_git() {
  local bp_dir="$1"
  local build_dir="$2"
  mkdir -p "$build_dir/.profile.d"
  echo "export NODE_ENV=production" > "$build_dir/.profile.d/node.sh"
  echo "export GIT_SHA=$SOURCE_VERSION" > "$build_dir/.profile.d/git.sh"
}

#
#
#

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
# ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

LOG_FILE=$(mktemp -t build-log.XXXXX)
echo "" > "$LOG_FILE"

#

header "Creating runtime environment"

write_profile "$BP_DIR" "$BUILD_DIR"
write_profile_git "$BP_DIR" "$BUILD_DIR"

if [ -d "$BP_DIR/profile" ]; then
  for file in "$BP_DIR"/profile/*.sh; do
    # shellcheck source=/dev/null.
    source "$file"
  done
fi

#

header "Installing node binary"
curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts

#

header "Installing bun binary"
curl -fsSL https://bun.sh/install | bash

#

cd "$BUILD_DIR"

#

header "Installing dependencies"
bun install --cache-dir "$CACHE_DIR" --frozen-lockfile

#

header "Build"
bun run build

#

header "Remove development dependencies"
rm -rf node_modules

#

header "Installing production dependencies"
bun install --cache-dir "$CACHE_DIR" --frozen-lockfile --production

#

header "Remove package manager cache"
bun pm cache rm
